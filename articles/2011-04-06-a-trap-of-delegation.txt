--- 
title: A trap of delegation
date: 06/04/2011


Beware of proxy objects. Here is an edge case I fell into and want to warn you.

Let's consider an ultimate proxy class:

<script src="https://gist.github.com/905490.js?file=gistfile1.rb"></script>

It delegates virtually everything to a given object. And one would
think (yeahl, including me) that we can use this proxy object
everywhere instead of the genuine object.



Counterexample
--------------

That's not true and here is the trap:

<script src="https://gist.github.com/905507.js?file=gistfile1.rb"></script>

A genuine object will pass this check:

<script src="https://gist.github.com/905509.js?file=gistfile1.rb"></script>

But proxy object will _not_:

<script src="https://gist.github.com/905510.js?file=gistfile1.rb"></script>



Why?
----

Because case internally uses `#===` to determine if a given object
belongs to a certain "when-block". Look:

<script src="https://gist.github.com/905512.js?file=gistfile1.rb"></script>

It's easier to track down in Rubinius:

`Object::kind_of_p` at [vm/builtin/object.cpp:428](https://github.com/evanphx/rubinius/blob/master/vm/builtin/object.cpp#L428)  
`Module::case_compare` at [vm/builtin/module.cpp:66](https://github.com/evanphx/rubinius/blob/master/vm/builtin/module.cpp#L66)  
...  
`Module#===` at [kernel/common/module.rb:572](https://github.com/evanphx/rubinius/blob/master/kernel/common/module.rb#L572)

You see? Not a single chance to have an influence on this process from
a Ruby level.
